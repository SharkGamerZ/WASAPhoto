# TODO:
# - [x] doLogin (see simplified login)
#   - [x] getUsers
# - [x] setMyUserName
# - [x] uploadPhoto
#   - [x] getPhoto
# - [x] deletePhoto
# - [x] followUser
# - [x] unfollowUser
#   - [x] getFollowing
# - [x] banUser
# - [x] unbanUser
# - [x] getUserProfile
# - [x] getMyStream
# - [x] likePhoto
# - [x] unlikePhoto
# - [x] commentPhoto
# - [x] uncommentPhoto
#
#
#
# - [ ] Aggiungere 201 per BanUser
#
#
#   Aggiunto Server
#   Corrette alcune risposte
#
#

tags:
  - name: "login"
    description: "Everything about your session"
  - name: "user"
    description: "Everything about your user profile"
  - name: "user following"
    description: "Everything about your user following"
  - name: "user bans"
    description: "Everything about your user bans"
  - name: "post"
    description: "Everything about your posts"
  - name: "post like"
    description: "Everything about your posts' likes"
  - name: "post comment"
    description: "Everything about your posts' comments"

openapi: 3.0.1
info:
  description: |
    These are API for the app WASAPhoto, the application for the
    2023/24 WASA Course.
  title: WASAPhoto
  version: 1.0.2

# Global application of the bearer authorization
security:
  - Authorization: []

# Server
servers:
  - url: http://localhost:3000
    description: Local server

# Components definition
components:
  # Definition of the Bearer Auth used
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      description: "Bearer token for authorization"
  #-------------------------- Definition of the schemas --------------------------
  schemas:
  #--------------------------Fields--------------------------
    #---------------Common-----------------
    Timestamp:
      description: |
        The timestamp of the object
      type: string
      format: date-time
      minLength: 10
      maxLength: 20
      example: "2025-01-01 00:00:00"

    #-------------User related-------------
    UserId:
      description: |
            Identifies a single user.
      type: integer
      minimum: 1
      example: 15
      readOnly: true

    Username:
      description: |
        Username of the user, can be changed
        It can't contain spaces
      type: string
      pattern: "^[a-zA-Z0-9._]*$"
      minLength: 3
      maxLength: 16
      example: "MarioRossi"

    Bio:
      description: |
        Bio of the user, can be changed.
        Appears on the user's page, under the name.
        Can be at most 255 characters.
      type: string
      minLength: 0
      maxLength: 255
      pattern: "^[a-zA-Z0-9\\s\\S]*$"
      example: "I'm from rome, I study at the Sapienza University and I attend the WASA course"

    #-------------Post related-------------
    PostId:
      description: "Identifies a single post"
      type: integer
      minimum: 1
      example: 17
      readOnly: true

    PostDescription:
      description: "The description of a post"
      type: string
      example: "Me at the zoo"
      minLength: 0
      maxLength: 500
      pattern: "^[a-zA-Z0-9\\s\\S]*$"

    PostPhoto:
      description: "The photo of the post"
      type: string
      format: binary
      minLength: 0
      maxLength: 10000000

    #-------------Comment related-------------
    CommentId:
      description: "Identifies a single comment"
      type: integer
      minimum: 1
      example: 17
      readOnly: true

    CommentBody:
      description: "The body of the comment"
      type: string
      example: "LOL! Really liked it"
      minLength: 0
      maxLength: 255
      pattern: "^[a-zA-Z0-9\\s\\S]*$"

    #--------------------------Objects--------------------------#
    # User object
    User:
      title: "User"
      description: "This object represents a single user on WASAPhoto"
      type: object
      properties:
        username: {$ref: "#/components/schemas/Username"}
        user_id: {$ref: "#/components/schemas/UserId"}
        bio: {$ref: "#/components/schemas/Bio"}

    # Post object
    Post:
      title: "Post"
      description: "This object represents a single post by a user"
      type: object
      properties:
        id: {$ref: "#/components/schemas/PostId"}
        user_id: {$ref: "#/components/schemas/UserId"}
        description: {$ref: "#/components/schemas/PostDescription"}
        photo: {$ref: "#/components/schemas/PostPhoto"}
        timestamp: {$ref: "#/components/schemas/Timestamp"}

    # Comment object
    Comment:
      title: "Comment"
      description: "This object represents a single comment"
      type: object
      properties:
        id: {$ref: "#/components/schemas/CommentId"}
        userid:  {$ref: "#/components/schemas/UserId"}
        post_owner: {$ref: "#/components/schemas/UserId"}
        post_id: {$ref: "#/components/schemas/PostId"}
        content: {$ref: "#/components/schemas/CommentBody"}
        timestamp: {$ref: "#/components/schemas/Timestamp"}

  #-------------------------- Definition of the parameters --------------------------#
  parameters:
    user_id:
      schema: {$ref: "#/components/schemas/UserId"}
      name: "user_id"
      in: path
      required: true
      description: Id of a single user, used to identify a specific user.

    post_id:
      schema: {$ref: "#/components/schemas/PostId"}
      name: "post_id"
      in: path
      required: true
      description: Id of a single post, used to identify a specific post.

    comment_id:
      schema: {$ref: "#/components/schemas/CommentId"}
      name: "comment_id"
      in: path
      required: true
      description: Id of a single comment, used to identify a specific comment.
  #-------------------------- Definition of the responses --------------------------#
  responses:
    NotFound:
      description: Resource was not found
      content:
        text/plain:
          schema:
            type: string
            description: The error
            minLength: 0
            maxLength: 512
            pattern: "^[a-zA-Z0-9\\s\\S]*$"



paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      security: []
      requestBody:
        description: User details
        content:
          application/json:
              schema:
                type: object
                description: Username
                properties:
                  username: {$ref: "#/components/schemas/Username"}
        required: true
      responses:
        "200":
          description: User log-in succesful
          content:
            application/json:
              schema:
                type: object
                description: Object of the user identifier
                properties:
                  identifier:
                    type: string
                    description: identifier of a user
                    example: "abcdef012345"
        '201':
          description: User created and log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Object of the user identifier
                properties:
                  identifier:
                    type: string
                    description: identifier of a user
                    example: "abcdef012345"

  /users:
    parameters:
        - name: username
          in: query
          required: false
          description: "Username for searching users"
          schema: {$ref: "#/components/schemas/Username"}
    get:
      tags: ["user"]
      operationId: getUsers
      summary: "Get all the users in the platform"
      description: |
        Return all the users in WASAPhoto.
        If an username is specified, return all the users that partially or totally match that username.
      responses:
        "200":
          description: "List of users"
          content:
            application/json:
              schema:
                type: object
                description: User array
                properties:
                  users:
                    type: array
                    items: { $ref: "#/components/schemas/User"}
                    minItems: 1
                    maxItems: 9999
                    description: Array of users
        "404": {$ref: "#/components/responses/NotFound"}

  /users/{user_id}:
    parameters:
        - {$ref: "#/components/parameters/user_id"}
    get:
      tags: ["user"]
      operationId: getUserProfile
      summary: Get a specific user's profile
      description: |
        Returns the user with the specified ID if it exists.
      responses:
        "200":
          description: User exists. Return user's profile
          content:
            application/json:
              schema: {$ref: "#/components/schemas/User"}
        "404": {$ref: "#/components/responses/NotFound"}
    delete:
      tags: ["user"]
      operationId: deleteUser
      summary: Deletes a user
      description: |
        If the specific user with "user_id" ID calls this, he deletes his profile.
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema: {$ref: "#/components/schemas/User"}
        "404": {$ref: "#/components/responses/NotFound"}


  /users/{user_id}/username:
    parameters:
        - {$ref: "#/components/parameters/user_id"}
    put:
      tags: ["user"]
      operationId: setMyUserName
      summary: Change your own username
      description: |
        If the user exists, it changes the username of the specified User with the one in the body.
      requestBody:
        required: true
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Username"}
      responses:
        "200":
          description: Username changed. User's profile returned.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/User"}
        "404": {$ref: "#/components/responses/NotFound"}

  /users/{user_id}/stream:
    parameters:
      - {$ref: "#/components/parameters/user_id"}
    get:
      tags: ["user"]
      operationId: getMyStream
      summary: Get your stream
      description: |
        If the user calling this is the user with "user_id" it returns it's own stream.
      responses:
        "200":
          description: Stream returned.
          content:
            application/json:
              schema:
                type: object
                description: Array of post
                properties:
                  posts:
                    type: array
                    items: { $ref: "#/components/schemas/Post"}
                    description: Array of posts
                    minItems: 0
                    maxItems: 9999
        "401":
          description: Unauthorized.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: This is not the stream of your profile




  /users/{user_id}/following:
    parameters:
        - {$ref: "#/components/parameters/user_id"}
    get:
      tags: ["user following"]
      operationId: getFollowing
      summary: Get list of followings
      description: |
        Returns the users followed by the user with the specified ID
      responses:
        "200":
          description: List of users followed.
          content:
            application/json:
              schema:
                type: object
                description: Array of users following the "user_id" User
                properties:
                  following:
                    type: array
                    items: { $ref: "#/components/schemas/User"}
                    description: Array of users
                    minItems: 0
                    maxItems: 999999999
        "404": {$ref: "#/components/responses/NotFound"}

  /users/{user_id}/following/{followed_user_id}:
    parameters:
        - {$ref: "#/components/parameters/user_id"}
        - schema: {$ref: "#/components/schemas/UserId"}
          name: "followed_user_id"
          in: path
          required: true
          description: Id of the user to follow/unfollow
    put:
      tags: ["user following"]
      operationId: followUser
      summary: Follow a user
      description: |
        Given a specific user with the "followed_user_id" ID, the user with "user_id" ID follows it.
      responses:
        "200":
          description: User followed
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: User mariorossi followed
        "404": {$ref: "#/components/responses/NotFound"}
    delete:
      tags: ["user following"]
      operationId: unfollowUser
      summary: Unfollow a user
      description: |
        Given a specific user with the "followed_user_id" ID, the user with "user_id" ID unfollows it.
        If the user is not already following the "followed_user_id" user, it returns an error.
      responses:
        "200":
          description: User unfollowed
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: User mariorossi unfollowed
        "404": {$ref: "#/components/responses/NotFound"}





  /users/{user_id}/banned:
    parameters:
        - {$ref: "#/components/parameters/user_id"}
    get:
      tags: ["user bans"]
      operationId: getBanneds
      summary: Get list of banned users
      description: |
        Returns the users banned by the user with the specified ID
      responses:
        "200":
          description: List of users banned.
          content:
            application/json:
              schema:
                type: object
                description: Array of banned users
                properties:
                  banned:
                    type: array
                    items: { $ref: "#/components/schemas/User"}
                    description: Array of users
                    minItems: 0
                    maxItems: 999999999
        "404": {$ref: "#/components/responses/NotFound"}

  /users/{user_id}/banned/{banned_user_id}:
    parameters:
        - {$ref: "#/components/parameters/user_id"}
        - schema: {$ref: "#/components/schemas/UserId"}
          name: "banned_user_id"
          in: path
          required: true
          description: Id of the user to ban/unban
    put:
      tags: ["user bans"]
      operationId: banUser
      summary: Ban a user
      description: |
        Given a specific user with the "banned_user_id" ID, the user with "user_id" ID bans it.
      responses:
        "200":
          description: User banned
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: User mariorossi was banned
        "404": {$ref: "#/components/responses/NotFound"}
    delete:
      tags: ["user bans"]
      operationId: unbanUser
      summary: Unbans a user
      description: |
        Given a specific user with the "banned_user_id" ID, the user with "user_id" ID unbans it.
        If the user with "banned_user_id" ID is not already banned, it returns an error.
      responses:
        "200":
          description: User unbanned
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: User mariorossi was unbanned
        "404": {$ref: "#/components/responses/NotFound"}






  /users/{user_id}/photos:
    parameters:
        - {$ref: "#/components/parameters/user_id"}
    get:
      tags: ["post"]
      operationId: getUserPosts
      summary: Get the list of posts of a user
      description: |
        Returns a list of posts of the user with the specified ID.
        If the user doesn't exists it doesn't return anything.
      responses:
        "200":
          description: Return user's posts.
          content:
            application/json:
              schema:
                type: object
                description: Array of posts of the user
                properties:
                  posts:
                    type: array
                    items: { $ref: "#/components/schemas/Post"}
                    description: Array of posts
                    minItems: 0
                    maxItems: 99999
        "404": {$ref: "#/components/responses/NotFound"}
    post:
      tags: ["post"]
      operationId: uploadPhoto
      summary: Add a post to your profile
      description: |
        Adds the post passed in the body to the user's profile.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              description: Post to add
              properties:
                description: { $ref: "#/components/schemas/PostDescription" }
                photo: { $ref: "#/components/schemas/PostPhoto" }
      responses:
        "201":
          description: Post published.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: Post was published


  /users/{user_id}/photos/{post_id}:
    parameters:
        - {$ref: "#/components/parameters/post_id"}
        - {$ref: "#/components/parameters/user_id"}
    get:
      tags: ["post"]
      operationId: getPhoto
      summary: Get a specific photo
      description: |
        Return a specific post of a user.
      responses:
        "200":
          description: Return post.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Post"}
        "404": {$ref: "#/components/responses/NotFound"}
    delete:
      tags: ["post"]
      operationId: deletePhoto
      summary: Delete a photo
      description: |
        Delete the photo with the specified ID.
        Doesn't return anything
      responses:
        "200":
          description: Photo deleted.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: Photo with id 294829 was deleted
        "404": {$ref: "#/components/responses/NotFound"}



  /users/{user_id}/photos/{post_id}/likes:
    parameters:
        - {$ref: "#/components/parameters/post_id"}
        - {$ref: "#/components/parameters/user_id"}
    get:
      tags: ["post like"]
      operationId: getLikes
      summary: Get likes of a photo
      description: |
        Return the list of users that liked the photo with "post_id" ID.
      responses:
        "200":
          description: Return users.
          content:
            application/json:
              schema:
                type: object
                description: Array of users that liked the photo
                properties:
                  likes:
                    type: array
                    items: { $ref: "#/components/schemas/User"}
                    description: Array of users
                    minItems: 0
                    maxItems: 999999999
        "404": {$ref: "#/components/responses/NotFound"}


  /users/{user_id}/photos/{post_id}/likes/{user_like_id}:
    parameters:
        - {$ref: "#/components/parameters/post_id"}
        - {$ref: "#/components/parameters/user_id"}
        - schema: {$ref: "#/components/schemas/UserId"}
          name: "user_like_id"
          in: path
          required: true
          description: Id of the user that likes/unlikes the photo.
    put:
      tags: ["post like"]
      operationId: likePhoto
      summary: Like a photo
      description: The user with the "user_like_id" ID likes the photo with "post_id" ID.
      responses:
        "201":
          description: Photo liked.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: Post with id 9284929 was liked
        "403":
          description: Photo already liked.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: Post with id 9284929 is already liked
        "404": {$ref: "#/components/responses/NotFound"}
    delete:
      tags: ["post like"]
      operationId: unlikePhoto
      summary: Unlike a photo
      description: The user with the "user_like_id" ID unlikes the photo with "post_id" ID.
      responses:
        "200":
          description: Photo unliked.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: Post with id 9284929 was unliked
        "400":
          description: Photo already unliked.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: Post with id 9284929 is already unliked
        "404": {$ref: "#/components/responses/NotFound"}





  /users/{user_id}/photos/{post_id}/comments:
    parameters:
        - {$ref: "#/components/parameters/post_id"}
        - {$ref: "#/components/parameters/user_id"}
    get:
      tags: ["post comment"]
      operationId: getComments
      summary: Get comments of a photo
      description: |
        Return the list of comments of the photo with "post_id" ID.
      responses:
        "200":
          description: Return comments.
          content:
            application/json:
              schema:
                type: object
                description: Array of comments of the post
                properties:
                  comments:
                    type: array
                    items: { $ref: "#/components/schemas/Comment"}
                    description: Array of comments
                    minItems: 0
                    maxItems: 999999
        "404": {$ref: "#/components/responses/NotFound"}

    post:
      operationId: commentPhoto
      tags: ["post comment"]
      summary: Post comment
      description: |
        The user who calls this comments the photo with "post_id" ID.
        The comment must be in the request body.
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Comment"}

      responses:
        "201":
          description: Photo commented.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: Post with id 2402029 was commented
        "404": {$ref: "#/components/responses/NotFound"}

  /users/{user_id}/photos/{post_id}/comments/{comment_id}:
    parameters:
        - {$ref: "#/components/parameters/post_id"}
        - {$ref: "#/components/parameters/user_id"}
        - {$ref: "#/components/parameters/comment_id"}
    delete:
      tags: ["post comment"]
      operationId: uncommentPhoto
      summary: Delete comment
      description: |
        The user who calls this delete his comment with "comment_id" ID.
        The comment must be his.
      responses:
        "200":
          description: Comment deleted.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: The comment with id 389282 was deleted
        "401":
          description: Unauthorized.
          content:
            text/plain:
              schema:
                type: string
                description: Response string
                example: The comment with id 299482 is not yours
        "404": {$ref: "#/components/responses/NotFound"}
